<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>LDS C&#43;E Documentation on LDS C&amp;E</title>
    <link>https://stanley-rozell.github.io/lds-ctrl-est/docs/</link>
    <description>Recent content in LDS C&#43;E Documentation on LDS C&amp;E</description>
    <generator>Hugo -- gohugo.io</generator><atom:link href="https://stanley-rozell.github.io/lds-ctrl-est/docs/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title></title>
      <link>https://stanley-rozell.github.io/lds-ctrl-est/docs/getting-started/getting-started/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://stanley-rozell.github.io/lds-ctrl-est/docs/getting-started/getting-started/</guid>
      <description>Getting Started #  This library uses the cross-platform tool CMake to orchestrate the building and testing process on Linux, MacOS, and Windows.
ldsCtrlEst requires Armadillo for linear algebra as well as HDF5 for saving output. vcpkg is a cross-platform C++ package manager which allows us to easily install and use the dependencies in isolation.
Tested Configurations #  Building C++ libraries with complex dependencies can be tricky business—in our experience builds have inexplicably worked in one environment and failed in another.</description>
    </item>
    
    <item>
      <title></title>
      <link>https://stanley-rozell.github.io/lds-ctrl-est/docs/getting-started/windows/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://stanley-rozell.github.io/lds-ctrl-est/docs/getting-started/windows/</guid>
      <description>Windows Installation #  Windows Pre-requisites #  Scoop is a very handy tool for easily installing all sorts of command-line applications. Install like this:
Set-ExecutionPolicy RemoteSigned -Scope CurrentUser # Optional: Needed to run a remote script the first time iwr get.scoop.sh | Invoke-Expression Install Git and CMake if you don&amp;rsquo;t already have them:
scoop install git cmake If that didn&amp;rsquo;t work, follow more detailed instructions here.
The easiest way to compile C++ project on Windows is with Visual Studio&amp;rsquo;s build tools, which you can download here (or here for the 2019 release which we tested—make sure you get the most recent one, e.</description>
    </item>
    
    <item>
      <title>C&amp;E</title>
      <link>https://stanley-rozell.github.io/lds-ctrl-est/docs/terminology/control-estimation/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://stanley-rozell.github.io/lds-ctrl-est/docs/terminology/control-estimation/</guid>
      <description>Control &amp;amp; Estimation #  The control system provided by this library is comprised of a state estimator and a controller. The estimator is responsible for estimating the latent state of the system, given measurements up to and including the current time (i.e., filtering). At each time step, the controller then uses the resulting state feedback and an internal model of the system to update the inputs to the process being manipulated.</description>
    </item>
    
    <item>
      <title>Models</title>
      <link>https://stanley-rozell.github.io/lds-ctrl-est/docs/terminology/model/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://stanley-rozell.github.io/lds-ctrl-est/docs/terminology/model/</guid>
      <description>Model Definitions #  This library provides methods for control and estimation of linear dynamical systems (LDS) of the following form:   \[\mathbf{x}_{t&amp;#43;1} = f\left( \mathbf{x}_{t}, \mathbf{v}_{t} \right) = \mathbf{A} \mathbf{x}_{t} &amp;#43; \mathbf{B} \mathbf{v}_{t} &amp;#43; \mathbf{m}_{t} &amp;#43; \mathbf{w}_{t}\]   \[\mathbf{y}_{t} = h\left( \mathbf{x}_{t} \right)\]  t : time indexx : system statev = g%u : input (e.g., in physical units used for model fit)u : control signal sent to actuator (e.</description>
    </item>
    
  </channel>
</rss>
