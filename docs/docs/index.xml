<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>LDS C&#43;E Documentation on LDS C&amp;E</title>
    <link>https://stanley-rozell.github.io/lds-ctrl-est/docs/</link>
    <description>Recent content in LDS C&#43;E Documentation on LDS C&amp;E</description>
    <generator>Hugo</generator>
    <language>en</language>
    <atom:link href="https://stanley-rozell.github.io/lds-ctrl-est/docs/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title></title>
      <link>https://stanley-rozell.github.io/lds-ctrl-est/docs/getting-started/getting-started/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>https://stanley-rozell.github.io/lds-ctrl-est/docs/getting-started/getting-started/</guid>
      <description>&lt;h1 id=&#34;getting-started&#34;&gt;&#xA;  Getting Started&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#getting-started&#34;&gt;#&lt;/a&gt;&#xA;&lt;/h1&gt;&#xA;&lt;p&gt;This library uses the cross-platform tool CMake to orchestrate the building and testing process on Linux, MacOS, and Windows.&lt;/p&gt;&#xA;&lt;p&gt;&lt;code&gt;ldsCtrlEst&lt;/code&gt; requires &lt;a href=&#34;http://arma.sourceforge.net/&#34;&gt;Armadillo&lt;/a&gt; for linear algebra as well as &lt;a href=&#34;https://www.hdfgroup.org/downloads/hdf5/&#34;&gt;HDF5&lt;/a&gt; for saving output. &lt;a href=&#34;https://vcpkg.io/&#34;&gt;&lt;code&gt;vcpkg&lt;/code&gt;&lt;/a&gt; is a cross-platform C++ package manager which allows us to easily install and use the dependencies in isolation.&lt;/p&gt;&#xA;&lt;h2 id=&#34;tested-configurations&#34;&gt;&#xA;  Tested Configurations&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#tested-configurations&#34;&gt;#&lt;/a&gt;&#xA;&lt;/h2&gt;&#xA;&lt;p&gt;Building C++ libraries with complex dependencies can be tricky business—in our experience builds have inexplicably worked in one environment and failed in another. To save you time, sweat, and tears, we suggest you simply use one of the following setups we know work fairly reliably, using the &lt;code&gt;RelWithDebInfo&lt;/code&gt; build type in the CMake configure command (&lt;code&gt;-DCMAKE_BUILD_TYPE:STRING=RelWithDebInfo&lt;/code&gt;):&lt;/p&gt;</description>
    </item>
    <item>
      <title></title>
      <link>https://stanley-rozell.github.io/lds-ctrl-est/docs/getting-started/windows/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>https://stanley-rozell.github.io/lds-ctrl-est/docs/getting-started/windows/</guid>
      <description>&lt;h1 id=&#34;windows-installation&#34;&gt;&#xA;  Windows Installation&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#windows-installation&#34;&gt;#&lt;/a&gt;&#xA;&lt;/h1&gt;&#xA;&lt;h2 id=&#34;windows-pre-requisites&#34;&gt;&#xA;  Windows Pre-requisites&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#windows-pre-requisites&#34;&gt;#&lt;/a&gt;&#xA;&lt;/h2&gt;&#xA;&lt;p&gt;Scoop is a very handy tool for easily installing all sorts of command-line applications. Install like this:&lt;/p&gt;&#xA;&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-shell&#34; data-lang=&#34;shell&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;Set-ExecutionPolicy RemoteSigned -Scope CurrentUser &lt;span style=&#34;color:#75715e&#34;&gt;# Optional: Needed to run a remote script the first time&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;iwr get.scoop.sh | Invoke-Expression&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Install Git and CMake if you don&amp;rsquo;t already have them:&lt;/p&gt;&#xA;&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-shell&#34; data-lang=&#34;shell&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;scoop install git cmake&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;If that didn&amp;rsquo;t work, follow more detailed instructions &lt;a href=&#34;https://github.com/ScoopInstaller/Install#readme&#34;&gt;here&lt;/a&gt;.&lt;/p&gt;&#xA;&lt;p&gt;The easiest way to compile C++ project on Windows is with Visual Studio&amp;rsquo;s build tools, which you can download &lt;a href=&#34;https://visualstudio.microsoft.com/downloads/&#34;&gt;here&lt;/a&gt; (or &lt;a href=&#34;https://visualstudio.microsoft.com/vs/older-downloads/&#34;&gt;here&lt;/a&gt; for the 2019 release which we tested—make sure you get the most recent one, e.g., 16.11 at time of writing). In the installer, click on &amp;ldquo;Desktop development with C++.&amp;rdquo; If you want to build Python bindings, you will need to use the Clang compiler, which you can add on the &amp;ldquo;Installation details&amp;rdquo; sidebar under optional features.&lt;/p&gt;</description>
    </item>
    <item>
      <title>C&amp;E</title>
      <link>https://stanley-rozell.github.io/lds-ctrl-est/docs/terminology/control-estimation/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>https://stanley-rozell.github.io/lds-ctrl-est/docs/terminology/control-estimation/</guid>
      <description>&lt;h1 id=&#34;control--estimation&#34;&gt;&#xA;  Control &amp;amp; Estimation&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#control--estimation&#34;&gt;#&lt;/a&gt;&#xA;&lt;/h1&gt;&#xA;&lt;p&gt;The control system provided by this library is comprised of a state estimator and a controller. The estimator is responsible for estimating the latent state of the system, given measurements up to and including the current time (i.e., &lt;em&gt;filtering&lt;/em&gt;). At each time step, the controller then uses the resulting state feedback and an internal model of the system to update the inputs to the process being manipulated.&lt;/p&gt;</description>
    </item>
    <item>
      <title>Models</title>
      <link>https://stanley-rozell.github.io/lds-ctrl-est/docs/terminology/model/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>https://stanley-rozell.github.io/lds-ctrl-est/docs/terminology/model/</guid>
      <description>&lt;h1 id=&#34;model-definitions&#34;&gt;&#xA;  Model Definitions&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#model-definitions&#34;&gt;#&lt;/a&gt;&#xA;&lt;/h1&gt;&#xA;&lt;p&gt;This library provides methods for control and estimation of linear dynamical systems (LDS) of the following form:&#xA;&#xA;&lt;link rel=&#34;stylesheet&#34; href=&#34;https://stanley-rozell.github.io/lds-ctrl-est/katex/katex.min.css&#34; /&gt;&#xA;&lt;script defer src=&#34;https://stanley-rozell.github.io/lds-ctrl-est/katex/katex.min.js&#34;&gt;&lt;/script&gt;&#xA;&lt;script defer src=&#34;https://stanley-rozell.github.io/lds-ctrl-est/katex/auto-render.min.js&#34; onload=&#34;renderMathInElement(document.body);&#34;&gt;&lt;/script&gt;&lt;span&gt;&#xA;  \[\mathbf{x}_{t&amp;#43;1} = f\left( \mathbf{x}_{t}, \mathbf{v}_{t} \right) = \mathbf{A} \mathbf{x}_{t} &amp;#43; \mathbf{B} \mathbf{v}_{t} &amp;#43; \mathbf{m}_{t} &amp;#43; \mathbf{w}_{t}\]&#xA;&lt;/span&gt;&#xA;&lt;/p&gt;&#xA;&lt;span&gt;&#xA;  \[\mathbf{y}_{t} = h\left( \mathbf{x}_{t} \right)\]&#xA;&lt;/span&gt;&#xA;&#xA;&lt;pre&gt;&lt;code&gt;t           : time index&#xA;x           : system state&#xA;v = g%u     : input (e.g., in physical units used for model fit)&#xA;u           : control signal sent to actuator (e.g., in Volts)&#xA;y           : system output&#xA;m           : process disturbance&#xA;w ~ N(0, Q) : process noise/disturbance&#xA;&#xA;A           : state matrix&#xA;B           : input coupling matrix&#xA;g           : input gain (e.g., for converting to control signal actuator voltage)&#xA;              n.b., assumes this conversion is linear&#xA;Q           : process noise covariance&#xA;&#xA;%           : element-wise multiplication&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;&lt;h2 id=&#34;lds-with-gaussian-observations&#34;&gt;&#xA;  LDS with Gaussian Observations&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#lds-with-gaussian-observations&#34;&gt;#&lt;/a&gt;&#xA;&lt;/h2&gt;&#xA;&lt;p&gt;For linear dynamical systems whose outputs are assumed to be corrupted by additive Gaussian noise before measurement (Gaussian LDS models), the output function takes the following form.&lt;/p&gt;</description>
    </item>
  </channel>
</rss>
