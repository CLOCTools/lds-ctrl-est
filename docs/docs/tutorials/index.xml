<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>LDS C&#43;E Examples on LDS C&amp;E</title>
    <link>https://stanley-rozell.github.io/lds-ctrl-est/docs/tutorials/</link>
    <description>Recent content in LDS C&#43;E Examples on LDS C&amp;E</description>
    <generator>Hugo</generator>
    <language>en</language>
    <atom:link href="https://stanley-rozell.github.io/lds-ctrl-est/docs/tutorials/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>GLDS Control</title>
      <link>https://stanley-rozell.github.io/lds-ctrl-est/docs/tutorials/eg_glds_control/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>https://stanley-rozell.github.io/lds-ctrl-est/docs/tutorials/eg_glds_control/</guid>
      <description>&lt;h1 id=&#34;glds-control-tutorial&#34;&gt;&#xA;  GLDS Control Tutorial&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#glds-control-tutorial&#34;&gt;#&lt;/a&gt;&#xA;&lt;/h1&gt;&#xA;&lt;p&gt;This tutorial shows how to use this library to control a system with a Gaussian LDS controller (&lt;code&gt;lds::gaussian::Controller&lt;/code&gt;). In place of a physical system, a GLDS model (&lt;code&gt;lds::gaussian::System&lt;/code&gt;) receives control inputs and simulates measurements for the feedback control loop. The controller is assumed to have an imperfect model of the system being controlled (here, a gain mismatch), and there is a stochastic, unmeasured disturbance acting on the system. A combination of integral action and adaptive estimation of this process disturbance is used to perform control.&lt;/p&gt;</description>
    </item>
    <item>
      <title>PLDS State Estimation</title>
      <link>https://stanley-rozell.github.io/lds-ctrl-est/docs/tutorials/eg_plds_state_estimation/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>https://stanley-rozell.github.io/lds-ctrl-est/docs/tutorials/eg_plds_state_estimation/</guid>
      <description>&lt;h1 id=&#34;plds-state-estimation-tutorial&#34;&gt;&#xA;  PLDS State Estimation Tutorial&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#plds-state-estimation-tutorial&#34;&gt;#&lt;/a&gt;&#xA;&lt;/h1&gt;&#xA;&lt;p&gt;This tutorial shows how to use this library to estimate the state of an LDS with Poisson observations from input/output data. In place of a physical system, another PLDS model (&lt;code&gt;lds::poisson::System&lt;/code&gt;) receives random inputs and provides measurements for the state estimator. For the sake of example, the only parameter mismatch is assumed to be the process disturbance, which is adaptively re-estimated.&lt;/p&gt;&#xA;&lt;p&gt;The full code for this can be found &lt;a href=&#34;https://stanley-rozell.github.io/lds-ctrl-est/docs/api/examples/eg_plds_est_8cpp-example/&#34;&gt;here&lt;/a&gt;.&lt;/p&gt;</description>
    </item>
    <item>
      <title>PLDS Switched Control</title>
      <link>https://stanley-rozell.github.io/lds-ctrl-est/docs/tutorials/eg_switched_plds_control/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>https://stanley-rozell.github.io/lds-ctrl-est/docs/tutorials/eg_switched_plds_control/</guid>
      <description>&lt;h1 id=&#34;plds-switched-control-tutorial&#34;&gt;&#xA;  PLDS Switched Control Tutorial&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#plds-switched-control-tutorial&#34;&gt;#&lt;/a&gt;&#xA;&lt;/h1&gt;&#xA;&lt;p&gt;This tutorial shows how to use this library to control a system with a switched PLDS controller (&lt;code&gt;lds::poisson::SwitchedController&lt;/code&gt;). This type of controller is applicable in scenarios where a physical system is not accurately captured by a &lt;strong&gt;single&lt;/strong&gt; LDS but has &lt;strong&gt;multiple&lt;/strong&gt; discrete operating modes where the dynamics can be well-approximated as linear.&lt;/p&gt;&#xA;&lt;p&gt;In the example that follows, another PLDS model (&lt;code&gt;lds::poisson::System&lt;/code&gt;) is used in place of a physical system. It receives control inputs and provides measurements for the simulated feedback control loop. This system stochastically flips between two input gains. Here, the controller is assumed to have a perfect model of the switching system being controlled. Note that in practice, users would need to have a decoder that estimates operating mode of the physical system being controlled. This library does not currently include operating mode estimation.&lt;/p&gt;</description>
    </item>
  </channel>
</rss>
